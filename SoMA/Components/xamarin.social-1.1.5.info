{"Name":"Xamarin.Social","Id":1048,"Alias":"xamarin.social","Description":"Xamarin.Auth helps you authenticate users via standard authentication mechanisms (e.g. OAuth 1.0 and 2.0), and store user credentials. It\u0027s also straightforward to add support for non-standard authentication schemes. The library is cross-platform, so once you learn it on iOS, you\u0027re all set on Android.\r\n\r\n```csharp\r\nusing Xamarin.Auth;\r\n\r\nvar auth = new OAuth2Authenticator (\r\n\tclientId: \"App ID from https://developers.facebook.com/apps\",\r\n\tscope: \"\",\r\n\tauthorizeUrl: new Uri (\"https://m.facebook.com/dialog/oauth/\"),\r\n\tredirectUrl: new Uri (\"http://www.facebook.com/connect/login_success.html\"));\r\n\r\nauth.Completed += (sender, eventArgs) =\u003e {\r\n\tDismissViewController (true, null);\r\n\tif (eventArgs.IsAuthenticated) {\r\n\t\t// Use eventArgs.Account to do wonderful things\r\n\t}\r\n}\r\n\r\nPresentViewController (auth.GetUI (), true, null);\r\n```\r\n\r\nIt\u0027s that easy to authenticate users!\r\n\r\n*Some screenshots assembled with [PlaceIt](http://placeit.breezi.com/).*\r\n","Version":"1.1.5","Summary":"Share statuses, links, and images on Facebook, Flickr, Twitter and more.","QuickStart":"## 1. Create and configure an authenticator\r\n\r\nLet\u0027s authenticate a user to access Facebook:\r\n\r\n```csharp\r\nusing Xamarin.Auth;\r\n...\r\nvar auth = new OAuth2Authenticator (\r\n\tclientId: \"App ID from https://developers.facebook.com/apps\",\r\n\tscope: \"\",\r\n\tauthorizeUrl: new Uri (\"https://m.facebook.com/dialog/oauth/\"),\r\n\tredirectUrl: new Uri (\"http://www.facebook.com/connect/login_success.html\"));\r\n```\r\n\r\nFacebook uses OAuth 2.0 authentication, so we create an `OAuth2Authenticator`. Authenticators are responsible for managing the user interface and communicating with authentication services.\r\n\r\nAuthenticators take a variety of parameters; in this case, the application\u0027s ID, its authorization scope, and Facebook\u0027s various service locations are required.\r\n\r\n\r\n\r\n\r\n## 2. Authenticate the user\r\n\r\nWhile authenticators manage their own UI, it\u0027s up to you to initially present the authenticator\u0027s UI on the screen. This lets you control how the authentication UI is displayed–modally, in navigation controllers, in popovers, etc.\r\n\r\nBefore we present the UI, we need to start listening to the `Completed` event which fires when the user successfully authenticates or cancels. You can find out if the authentication succeeded by testing the `IsAuthenticated` property of `eventArgs`:\r\n\r\n```csharp\r\nauth.Completed += (sender, eventArgs) =\u003e {\r\n\t// We presented the UI, so it\u0027s up to us to dimiss it on iOS.\r\n\tDismissViewController (true, null);\r\n\r\n\tif (eventArgs.IsAuthenticated) {\r\n\t\t// Use eventArgs.Account to do wonderful things\r\n\t} else {\r\n\t\t// The user cancelled\r\n\t}\r\n};\r\n```\r\n\r\nAll the information gathered from a successful authentication is available in `eventArgs.Account`.\r\n\r\nNow we\u0027re ready to present the login UI from `ViewDidAppear` on iOS:\r\n\r\n```csharp\r\nPresentViewController (auth.GetUI (), true, null);\r\n```\r\n\r\nThe `GetUI` method returns `UINavigationControllers` on iOS, and `Intents` on Android. On Android, we would write the following code to present the UI from `OnCreate`:\r\n\r\n```csharp\r\nStartActivity (auth.GetUI (this));\r\n```\r\n\r\n\r\n\r\n## 3. Making requests\r\n\r\nSince Facebook is an OAuth2 service, we\u0027ll make requests with `OAuth2Request` providing the account we retrieved from the `Completed` event. Assuming we\u0027re authenticated, we\u0027ll grab the user\u0027s info to demonstrate:\r\n\r\n```csharp\r\nvar request = new OAuth2Request (\"GET\", new Uri (\"https://graph.facebook.com/me\"), null, eventArgs.Account);\r\nrequest.GetResponseAsync().ContinueWith (t =\u003e {\r\n\tif (t.IsFaulted)\r\n\t\tConsole.WriteLine (\"Error: \" + t.Exception.InnerException.Message);\r\n\telse {\r\n\t\tstring json = t.Result.GetResponseText();\r\n\t\tConsole.WriteLine (json);\r\n\t}\r\n});\r\n```\r\n\r\n\r\n## 4. Store the account\r\n\r\nXamarin.Auth securely stores `Account` objects so that you don\u0027t always have to reauthenticate the user. The `AccountStore` class is responsible for storing `Account` information, backed by the [Keychain](https://developer.apple.com/library/ios/#documentation/security/Reference/keychainservices/Reference/reference.html) on iOS and a [KeyStore](http://developer.android.com/reference/java/security/KeyStore.html) on Android:\r\n\r\n```csharp\r\n// On iOS:\r\nAccountStore.Create ().Save (eventArgs.Account, \"Facebook\");\r\n\r\n// On Android:\r\nAccountStore.Create (this).Save (eventArgs.Account, \"Facebook\");\r\n```\r\n\r\nSaved Accounts are uniquely identified using a key composed of the account\u0027s `Username` property and a \"Service ID\". The \"Service ID\" is any string that is used when fetching accounts from the store.\r\n\r\nIf an `Account` was previously saved, calling `Save` again will overwrite it. This is convenient for services that expire the credentials stored in the account object.\r\n\r\n\r\n\r\n\r\n## 5. Retrieve stored accounts\r\n\r\nYou can fetch all `Account` objects stored for a given service:\r\n\r\n```csharp\r\n// On iOS:\r\nIEnumerable\u003cAccount\u003e accounts = AccountStore.Create ().FindAccountsForService (\"Facebook\");\r\n\r\n// On Android:\r\nIEnumerable\u003cAccount\u003e accounts = AccountStore.Create (this).FindAccountsForService (\"Facebook\");\r\n```\r\n\r\nIt\u0027s that easy.\r\n\r\n\r\n\r\n\r\n## 6. Make your own authenticator\r\n\r\nXamarin.Auth includes OAuth 1.0 and OAuth 2.0 authenticators, providing support for thousands of popular services. For services that use traditional username/password authentication, you can roll your own authenticator by deriving from `FormAuthenticator`.\r\n\r\nIf you want to authenticate against an ostensibly unsupported service, fear not – Xamarin.Auth is extensible! It\u0027s very easy to create your own authenticators – just derive from any of the existing authenticators and start overriding methods.\r\n\r\n\r\n","Hash":"7c4b352339aa8959ddff22cd4a04437e","TargetPlatforms":["ios","android"],"TrialHash":null}