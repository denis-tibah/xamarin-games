// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using Xamarin.Media;
using Xamarin.Geolocation;
using System.Threading.Tasks;
using Xamarin.Social.Services;
using Xamarin.Social;

using Core;
/*
 SoMA : Social Mobile Auth

This file includes both the 'deprecated' and 'new' Photo Picker API.

It will be updated shortly to *just* use the new API.

 */
using System.Drawing;


namespace SoMA
{
	public partial class PhotoScreen : UIViewController
	{
#if !VISUALSTUDIO
		MediaPickerController pickerController;
#endif

		string fileName = "", fileNameThumb = "";
		string location = "";

		Core.ShareItem shareItem { get; set; }

		public void SetItem (Core.ShareItem item)
		{
			fileName = item.ImagePath;
			location = item.Location;
		}

		bool isLocationSet {
			get {
				return !(location == "");
			}
		}

		public PhotoScreen (IntPtr handle) : base (handle)
		{
			Title = "Share";
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			if (fileName == "") {
				fileName = "in-progress";
				var picker = new MediaPicker ();
				//           new MediaPicker (this); on Android
				if (!picker.IsCameraAvailable || !picker.PhotosSupported)
					Console.WriteLine ("No camera!");
				else {
					var options = new StoreCameraMediaOptions {
						Name = DateTime.Now.ToString("yyyyMMddHHmmss"),
						Directory = "MediaPickerSample"
					};
#if !VISUALSTUDIO
					#region new style
					pickerController = picker.GetTakePhotoUI (options);
					this.PresentViewController (pickerController, true, null);

					pickerController.GetResultAsync ().ContinueWith (t => {
						// We need to dismiss the controller ourselves
						this.DismissViewController (true, () => {
							// User canceled or something went wrong
							if (t.IsCanceled || t.IsFaulted)
								return;

							// We get back a MediaFile
							MediaFile media = t.Result;
							fileName = media.Path;
							PhotoImageView.Image = new UIImage (fileName);
							SavePicture(fileName);

						});
					}, TaskScheduler.FromCurrentSynchronizationContext ()); // Make sure we use the UI thread to show our photo.
					#endregion
#else
					#region old style (deprecated)
					picker.TakePhotoAsync (options).ContinueWith (t => {
						if (t.IsCanceled) {
							Console.WriteLine ("User canceled");
							fileName = "cancelled";
							InvokeOnMainThread(() =>{
								NavigationController.PopToRootViewController(false);
							});
							return;
						}
						Console.WriteLine (t.Result.Path);
						fileName = t.Result.Path;
						InvokeOnMainThread(() =>{
							PhotoImageView.Image = new UIImage (fileName);
						});
						SavePicture(fileName);
					});
					#endregion
#endif
				}
			} else if (fileName == "cancelled") {
				NavigationController.PopToRootViewController (true);
			} else {
				// populate screen with existing item
				PhotoImageView.Image = new UIImage (fileName);
				LocationText.Text = location;
			}

			var locator = new Geolocator { DesiredAccuracy = 50 };
			//            new Geolocator (this) { ... }; on Android
			locator.GetPositionAsync (timeout: 10000).ContinueWith (p => {
				Console.WriteLine ("Position Latitude: {0}", p.Result.Latitude);
				Console.WriteLine ("Position Longitude: {0}", p.Result.Longitude);

				location = string.Format("{0},{1}", p.Result.Latitude, p.Result.Longitude);

				InvokeOnMainThread(() =>{
					LocationText.Text = location;
				});
			});
		}

		/// <summary>
		/// Expects 
		/// </summary>
		void SavePicture (string fileName) 
		{
			fileNameThumb = fileName.Replace(".jpg", "_thumb.jpg");
			var thumbnail = PhotoImageView.Image.Scale(new SizeF(88, 88));
			NSData imgData = thumbnail.AsJPEG();
			NSError err = null;
			if (imgData.Save(fileNameThumb, false, out err)) {
				Console.WriteLine("saved as " + fileNameThumb);
			} else {
				Console.WriteLine("NOT saved as " + fileNameThumb + " because" + err.LocalizedDescription);
			}
		}
		/// <summary>
		/// Set up an account at
		/// https://dev.twitter.com/apps
		/// </summary>
		partial void ShareTwitter_TouchUpInside (UIButton sender)
		{
			var twitter = new Twitter5Service ();

			Share(twitter);
		}

		/// <summary>
		/// Create an app and get a ClientId at  
		/// https://developers.facebook.com/apps
		/// </summary>
		partial void ShareFacebook_TouchUpInside (UIButton sender)
		{
			// 1. Create the service
			var facebook = new FacebookService {
				ClientId = ServiceConstants.FacebookClientId,
				RedirectUrl = new System.Uri (ServiceConstants.FacebookRedirectUrl)
			};
			Share(facebook);
		}

		/// <summary>
		/// Obtain 
		/// 
		/// </summary>
		partial void ShareAppnet_TouchUpInside (UIButton sender)
		{
			var appnet = new AppDotNetService { 
				ClientId = ServiceConstants.AppDotNetClientId
			};
			Share(appnet);
		}

		/// <summary>
		/// Obtain ConsumerKey and ConsumerSecret from
		/// http://www.flickr.com/services/apps/by/me
		/// </summary>
		partial void ShareFlickr_TouchUpInside (UIButton sender)
		{
			var flickr = new FlickrService {
				ConsumerKey = ServiceConstants.FlickrConsumerKey,
				ConsumerSecret = ServiceConstants.FlickrConsumerSecret,
			};
			Share(flickr);
		}

		void Share (Service service)
		{
			// 2. Create an item to share
			var item = new Item { Text = "Xamarin.SoMA ... Social Mobile & Auth! " };
			item.Images.Add(new ImageData(fileName));
			if (isLocationSet) item.Links.Add(new Uri( "https://maps.google.com/maps?q=" + location));

			// 3. Present the UI on iOS
			var shareController = service.GetShareUI (item, result => {
				DismissViewController (true, null);

				// result lets you know if the user shared the item or canceled
				if (result == ShareResult.Cancelled) return;

				Console.WriteLine(service.Title + " shared");

				// 4. Now save to the database for the MainScreen list
				var si = new Core.ShareItem() {
					Text = item.Text, // get the edited text from the share UI
					ImagePath = fileName,
					ThumbImagePath = fileNameThumb,
					Location = location
				};
				if (item.Links.Count > 0) si.Link = item.Links[0].AbsoluteUri;
				si.SocialType = service.Title;

				AppDelegate.Database.SaveItem(si);
				shareItem = si;

				// 5. Return to the MainScreen
				NavigationController.PopViewControllerAnimated(true);
			});

			PresentViewController (shareController, true, null);
		}
	}
}
