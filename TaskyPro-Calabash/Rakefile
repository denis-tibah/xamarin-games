require 'fileutils'
require 'rubygems'

# Some utility functions
def set(key, value)
  if false == value
    value = 'FALSE'
  elsif true == value
    value = 'TRUE'
  end
  ENV[key.to_s.upcase] = value
end

def fetch(key)
  val = ENV[key.to_s.upcase]
  if 'FALSE' == val
    val = false
  elsif 'TRUE' == val
    val = true
  end
  val
end

if File.exists? ('rake_env')
  load 'rake_env'
else
  puts "WARNING: no rake_env file found. If you didn't set everything in your ENV, you will be unhappy."
end

# Hardcoding these paths here - adjust them as necessary.
@mono = '/Library/Frameworks/Mono.framework/Versions/Current/bin/mono'
@xamarin_component = './xamarin-component.exe'
@apk = './Tasky.Droid/bin/Release/com.xamarin.samples.taskydroid-Signed.apk'
@ipa = './Tasky.iOS/bin/iPhone/Debug/TaskyiOS-1.ipa'

# These values will come from either the file rake_env or environment variables
@android_device_id = fetch(:android_device_id)
@android_api_key = fetch(:android_api_key)
@ios_device_id = fetch(:ios_device_id)
@ios_api_key = fetch(:ios_api_key)

task :default => [:clean, :build]

task :require_android_environment do
  if @android_api_key.nil? || 0 == @android_api_key.length
    raise Exception.new("No Test Cloud API for the APK specified.")
  end
end

task :require_ios_environment do
  if @ios_api_key.nil? || 0 == @ios_api_key.length
    raise Exception.new("No Test Cloud API for the IPA.")
  end
end


desc "Cleans the project"
task :clean => [:clean_screenshots] do
  directories_to_delete = [
      "./bin",
      "./obj",
      "./screenshots",
      "./test_servers",
      "./testresults.html",
      "./Tasky.iOS/bin",
      "./Tasky.iOS/obj",
      "./Tasky.Droid/bin",
      "./Tasky.Droid/obj",
      "./Tasky.Core/bin",
      "./Tasky.Core/obj"
  ]

  directories_to_delete.each { |x|
    rm_rf x
  }
end

desc "Compiles the Android and iOS projects."
task :build => [:build_android, :build_ios] do

end

desc "Delete the existing screen shots and calabash reports."
task :clean_screenshots do
  directories_to_delete = [
      "./screenshots/"
  ]

  directories_to_delete.each { |directory|
    rm_rf directory
  }
end

task :build_android => [:clean] do
  `/usr/bin/xbuild /t:Package /p:Configuration=Release ./Tasky.Droid/Tasky.Droid.csproj`
end

task :build_ios => [:clean] do
  puts "Build the ad-hoc IPA:"
  system '/Applications/Xamarin\\ Studio.app/Contents/MacOS/mdtool build "--configuration:Debug|iPhone" TaskyPro-Calabash.sln'
  puts "Build the iPhoneSimulator:"
  system '/Applications/Xamarin\\ Studio.app/Contents/MacOS/mdtool build "--configuration:Debug|iPhoneSimulator" TaskyPro-Calabash.sln'
end

desc "Compile the APK and submits it to Test Cloud"
task :testcloud_android => [:require_android_environment, :build_android] do
  # Add the --async option to run asynchronously.
  system "calabash-android build #{@apk}"
  system "test-cloud submit #{@apk} #{@android_api_key} --devices #{@android_device_id} --profile=android --config=config/cucumber.yml --pretty"
end

desc "Recompiles the IPA and submits it to Test Cloud."
task :testcloud_ios => [:require_ios_environment, :build_ios] do
  system "test-cloud submit #{@ipa} #{@ios_api_key} --devices #{@ios_device_id} --profile=ios --config=config/cucumber.yml --pretty"
end

desc "Recompiles the APK and then will install it in the default emulator or attached device."
task :test_android => [:build_android] do
  system "calabash-android run #{@apk} -p android"
end


desc "Installs the components from the Component store"
task :install_components do
    system " #{@mono} --runtime=v4.0 #{@xamarin_component} restore TaskyPro-Calabash.sln"
end